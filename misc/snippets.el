;; with most of these the question is whether you want to write a tag
;; first and then include that tag into the snippet, and move mark
;; inside scope, or you don't write the tag, you just get the skeleton
;; and move mark to where the tag is supposed to be

;; best solution is probably to bind to some key
;; then add sequences for specific snippets and their versions you want

;; you could also just set the mark where you move next...

(defun cut-snippet-tag ()
  (cua-set-mark)
  (move-beginning-of-line nil)
  (kill-region 0 0 1)
  (deactivate-mark)
  )

(defun begin-of-code ()
  (move-beginning-of-line nil)
  (right-word)
  (left-word)  
  )

(defun bracketize (arg1)
  (begin-of-code)
  (insert (format "%s" arg1))
  (insert " (")
  (move-end-of-line nil)
  (insert ")")
  (indent-for-tab-command)
  )

(defun snippet-el-defun ()
  (interactive)
  (cut-snippet-tag)
  (insert "(defun ")
  (cua-paste nil)
  (insert " ()")
  (electric-newline-and-maybe-indent)
  (indent-for-tab-command)
  (insert "(interactive)")
  (electric-newline-and-maybe-indent)
  (electric-newline-and-maybe-indent)
  (insert ")")
  (indent-for-tab-command)
  (previous-line)
  (indent-for-tab-command)
  )

;; maybe don't insert below, assume point is at line of {
(defun snippet-c-scope ()
  (interactive)
  (electric-newline-and-maybe-indent)
  (indent-for-tab-command)
  (insert "{")
  (indent-for-tab-command)
  (electric-newline-and-maybe-indent)
  (electric-newline-and-maybe-indent)
  (insert "}")
  (indent-for-tab-command)
  (previous-line)
  (indent-for-tab-command)  
  )
(global-set-key (kbd "S-<return> q") 'snippet-c-scope)

(defun snippet-c-struct ()
  (interactive)
  (cut-snippet-tag)
  (insert "typedef struct ")
  (cua-paste nil)
  (left-word)
  (cua-set-mark)
  (right-char)
  (capitalize-region 0 0 1)
  (deactivate-mark)
  (move-end-of-line nil)
  (electric-newline-and-maybe-indent)
  (insert "{")
  (electric-newline-and-maybe-indent)
  (electric-newline-and-maybe-indent)
  (insert "} ")
  (cua-paste nil)
  (insert ";")
  (previous-line)
  (indent-for-tab-command)
  )
(global-set-key (kbd "S-<return> s") 'snippet-c-struct)

(defun snippet-c-case ()
  (interactive)
  (begin-of-code)
  (insert "case ")
  (move-end-of-line nil)
  (insert ":")
  (indent-for-tab-command)
  (electric-newline-and-maybe-indent)
  (insert "{")
  (indent-for-tab-command)
  (electric-newline-and-maybe-indent)
  (electric-newline-and-maybe-indent)
  (insert "} break;")
  (indent-for-tab-command)
  (previous-line)
  (indent-for-tab-command)
  )
(global-set-key (kbd "S-<return> c") 'snippet-c-case)

;; InvalidDefaultCase in default branch??
(defun snippet-c-switch ()
  (interactive)
  (bracketize "switch")
  (snippet-c-scope)
  )
(global-set-key (kbd "S-<return> t") 'snippet-c-switch)

(defun snippet-c-if ()
  (interactive)
  (bracketize "if")
  (snippet-c-scope)
  )
(global-set-key (kbd "S-<return> f") 'snippet-c-if)

;; InvalidCodePath in else branch??
(defun snippet-c-ifelse ()
  (interactive)
  (bracketize "if")
  (snippet-c-scope)
  (next-line)
  (electric-newline-and-maybe-indent)  
  (insert "else")
  (indent-for-tab-command)
  (snippet-c-scope)
  (previous-line)
  (previous-line)
  (previous-line)
  (previous-line)
  (indent-for-tab-command)
  )
(global-set-key (kbd "S-<return> e") 'snippet-c-ifelse)

(defun snippet-c-while ()
  (interactive)
  (bracketize "while")
  (snippet-c-scope)
  )
(global-set-key (kbd "S-<return> w") 'snippet-c-while)

(defun snippet-c-for ()
  (interactive)
  (indent-for-tab-command)
  (insert "for (; ; )")
  (snippet-c-scope)
  (previous-line)
  (previous-line)
  )
(global-set-key (kbd "S-<return> a") 'snippet-c-for)

;; #define #undef??

;; include for system file??
;; same for tag first??
;; multi line include on tags??
(defun snippet-c-include ()
  (interactive)
  (move-beginning-of-line nil)
  (insert "#include \"\"")
  (left-char)
  (indent-for-tab-command)
  )
(global-set-key (kbd "S-<return> \\") 'snippet-c-include)

(defun snippet-c-ppif ()
  (interactive)
  (begin-of-code)
  (insert "#if ")
  (move-end-of-line nil)
  (indent-for-tab-command)
  (electric-newline-and-maybe-indent)
  (electric-newline-and-maybe-indent)
  (insert "#endif")
  (indent-for-tab-command)
  (previous-line)
  (indent-for-tab-command)
  )
(global-set-key (kbd "S-<return> p f") 'snippet-c-ppif)

(defun snippet-c-ppifd ()
  (interactive)
  (begin-of-code)
  (insert "#ifdef ")
  (move-end-of-line nil)
  (indent-for-tab-command)
  (electric-newline-and-maybe-indent)
  (electric-newline-and-maybe-indent)
  (insert "#endif")
  (indent-for-tab-command)
  (previous-line)
  (indent-for-tab-command)
  )
(global-set-key (kbd "S-<return> p d") 'snippet-c-ppif)

(defun snippet-c-ppifelse ()
  (interactive)
  (begin-of-code)
  (insert "#if ")
  (move-end-of-line nil)
  (indent-for-tab-command)
  (electric-newline-and-maybe-indent)
  (electric-newline-and-maybe-indent)
  (insert "#else")
  (indent-for-tab-command)
  (electric-newline-and-maybe-indent)
  (indent-for-tab-command)
  (electric-newline-and-maybe-indent)
  (insert "#endif")
  (indent-for-tab-command)
  (previous-line)
  (previous-line)
  (previous-line)
  (indent-for-tab-command)
  )
(global-set-key (kbd "S-<return> p e") 'snippet-c-ppifelse)

(defun snippet-c-ppifdelse ()
  (interactive)
  (begin-of-code)
  (insert "#ifdef ")
  (move-end-of-line nil)
  (indent-for-tab-command)
  (electric-newline-and-maybe-indent)
  (electric-newline-and-maybe-indent)
  (insert "#else")
  (indent-for-tab-command)
  (electric-newline-and-maybe-indent)
  (indent-for-tab-command)
  (electric-newline-and-maybe-indent)
  (insert "#endif")
  (indent-for-tab-command)
  (previous-line)
  (previous-line)
  (previous-line)
  (indent-for-tab-command)
  )
(global-set-key (kbd "S-<return> p s") 'snippet-c-ppifdelse)

(defun snippet-c-guard ()
  (interactive)
  (move-beginning-of-line nil)
  (insert "#ifndef ")
  (insert (subst-char-in-string ?. ?_ (buffer-name)))
  (move-beginning-of-line nil)
  (right-word)
  (right-char)
  (cua-set-mark)
  (move-end-of-line nil)
  (upcase-region 0 0 1)
  (cua-copy-region nil)
  (deactivate-mark)
  (indent-for-tab-command)
  (electric-newline-and-maybe-indent)
  (insert "#define ")
  (cua-paste nil)
  (indent-for-tab-command)
  (electric-newline-and-maybe-indent)
  (indent-for-tab-command)
  (electric-newline-and-maybe-indent)
  (electric-newline-and-maybe-indent)
  (indent-for-tab-command)
  (electric-newline-and-maybe-indent)
  (insert "#endif")
  (indent-for-tab-command)
  (previous-line)
  (previous-line)
  (indent-for-tab-command)
  )
(global-set-key (kbd "S-<return> g") 'snippet-c-guard)

;; return (result); instead??
;; add two lines of padding??
(defun snippet-c-fresult ()
  (interactive)
  (previous-line)
  (move-end-of-line nil)
  (electric-newline-and-maybe-indent)
  (insert "{")
  (indent-for-tab-command)
  (next-line)
  (move-end-of-line nil)
  (insert " ")
  (insert "result;")
  (indent-for-tab-command)
  (electric-newline-and-maybe-indent)
  (electric-newline-and-maybe-indent)
  (insert "return result;")
  (indent-for-tab-command)
  (electric-newline-and-maybe-indent)
  (insert "}")
  (indent-for-tab-command)
  (previous-line)
  (previous-line)
  (indent-for-tab-command)
  )
(global-set-key (kbd "S-<return> r") 'snippet-c-fresult)

